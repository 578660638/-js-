// ==UserScript==
// @name         search.decode
// @namespace    http://tampermonkey.net/
// @version      0.1
// @description  try to take over the world!
// @author       You
// @match        http://*/*
// @grant        none
// ==/UserScript==

(function() {
    for (var p in window){
        var s = p.toLowerCase()
        if(s.indexOf('encode')!=-1 || s.indexOf('encry')!=-1){
            console.log("warning! \n",window[p])
        }
        if(s.indexOf('decode')!=-1 || s.indexOf('decry')!=-1){
            console.log("warning! \n",window[p])
        }
    }
})();





// ==UserScript==
// @name         cookie
// @namespace    http://tampermonkey.net/
// @version      0.1
// @description  day day up!
// @author       You
// @include      *
// @grant        none
// @run-at       document-end
// ==/UserScript==
(function () {
        var cookie_cache = document.cookie
        Object.defineProperty(document,'cookie',{
            get:function () {
                console.log('获取cookie')
                debugger;
                return cookie_cache
            },
            set:function () {
                console.log("设置cookie")
                debugger;
            }
        })
    })()
    
    
    
    
    
    
    
    // ==UserScript==
// @name         New Userscript
// @namespace    http://tampermonkey.net/
// @version      0.1
// @description  try to take over the world!
// @author       You
// @match        http://*/*
// @grant        none
// ==/UserScript==

var source = ['alert', 'decodeData', 'String.fromCharCode', 'fromCharCode', 'base64decode', 'md5', 'decode', 'btoa', 'JSON.stringify', 'MD5', 'RSA', 'AES', 'CryptoJS', 'encrypt', 'strdecode', "encode", 'decodeURIComponent', '_t'];
    console.log("开始测试是否有解密函数");
    let realCtx, realName;

    function getRealCtx(ctx, funcName) {
        let parts = funcName.split(".");
        let realCtx = ctx;
        for (let i = 0; i < parts.length - 1; i++) {
            realCtx = realCtx[parts[i]];
        }
        return realCtx;
    }

    function getRealName(funcName) {
        let parts = funcName.split(".");
        return parts[parts.length - 1];
    }
function hook(ctx, funcName, level, originFunc) {
        ctx[funcName] = function (a) {
            console.log("level:" + level + " function:" + funcName, a);
            let regexp = / [\S]*\(.*\)\;/g;
            let match = originFunc.toString().match(regexp)
            console.log(match);
            debugger;
            return originFunc(a);
        };
    }

    function test(ctx, level) {
        for (let i = 0; i < source.length; i++) {
            let f = source[i];
            let realCtx = getRealCtx(ctx, f);
            let realName = getRealName(f);
            let chars = realCtx[realName];
            hook(realCtx, realName, level, chars);
        }
        
        
        
        
        
        // ==UserScript==
// @name         yjh-common
// @namespace    http://tampermonkey.net/
// @version      0.1
// @description  day day up
// @author       kene
// @include      *
// @grant        none
// @run-at       document-end
// ==/UserScript==

(function () {
    'use strict';
    var source = ['alert', 'decodeData', 'String.fromCharCode', 'fromCharCode', 'base64decode', 'md5', 'decode', 'btoa', 'JSON.stringify', 'MD5', 'RSA', 'AES', 'CryptoJS', 'encrypt', 'strdecode', "encode", 'decodeURIComponent', '_t'];
    console.log("开始测试是否有解密函数");
    let realCtx, realName;

    function getRealCtx(ctx, funcName) {
        let parts = funcName.split(".");
        let realCtx = ctx;
        for (let i = 0; i < parts.length - 1; i++) {
            realCtx = realCtx[parts[i]];
        }
        return realCtx;
    }

    function getRealName(funcName) {
        let parts = funcName.split(".");
        return parts[parts.length - 1];
    }

    function hook(ctx, funcName, level, originFunc) {
        ctx[funcName] = function (a) {
            console.log("level:" + level + " function:" + funcName, a);
            let regexp = / [\S]*\(.*\)\;/g;
            let match = originFunc.toString().match(regexp)
            console.log(match);
            debugger;
            return originFunc(a);
        };
    }

    function test(ctx, level) {
        for (let i = 0; i < source.length; i++) {
            let f = source[i];
            let realCtx = getRealCtx(ctx, f);
            let realName = getRealName(f);
            let chars = realCtx[realName];
            hook(realCtx, realName, level, chars);
        }
    }

    test(window, 1);
})();
